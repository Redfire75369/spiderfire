// @flow

declare module "fs" {
	declare export interface Metadata {
		size: number;

		isFile: boolean;
		isDirectory: boolean;
		isSymlink: boolean;

		created: Date | null;
		accessed: Date | null;
		modified: Date | null;

		readonly: boolean;
	}

	declare export interface OpenOptions {
		read?: boolean,
		write?: boolean,
		append?: boolean,
		create?: boolean,
		createNew?: boolean,
	}

	declare export type SeekMode = "current" | "start" | "end";

	declare export class DirEntry {
		name(): string;
		path(): string;
		metadata(): Metadata;
	}

	declare export class FileHandle {
		read(): Promise<Uint8Array>;
		read(array: Uint8Array): Promise<number>;

		readSync(): Uint8Array;
		readSync(array: Uint8Array): number;

		write(source: BufferSource): Promise<number>;
		writeSync(source: BufferSource): number;

		writeAll(source: BufferSource): Promise<void>;
		writeAllSync(source: BufferSource): void;

		truncate(length?: number): Promise<void>;
		truncateSync(length?: number): void;

		seek(offset: number, mode?: SeekMode): Promise<number>;
		seekSync(offset: number, mode?: SeekMode): number;

		sync(): Promise<void>;
		syncSync(): void;

		syncData(): Promise<void>;
		syncDataSync(): void;

		metadata(): Promise<Metadata>;
		metadataSync(): Metadata;
	}

	declare export function open(path: string, options?: OpenOptions): Promise<FileHandle>;

	declare export function create(path: string): Promise<FileHandle>;

	declare export function metadata(path: string): Promise<Metadata>;

	declare export function linkMetadata(path: string): Promise<Metadata>;

	declare export function readDir(path: string): Promise<Iterable<DirEntry>>;

	declare export function createDir(path: string, recursive?: boolean): Promise<void>;

	declare export function remove(path: string, recursive?: boolean): Promise<void>;

	declare export function copy(from: string, to: string): Promise<number>;

	declare export function rename(from: string, to: string): Promise<void>;

	declare export function symlink(original: string, link: string): Promise<void>;

	declare export function link(original: string, link: string): Promise<void>;

	declare export function readLink(path: string): Promise<string>;

	declare export function canonical(path: string): Promise<string>;

	import {
		open as openSync,
		create as createSync,

		metadata as metadataSync,
		linkMetadata as linkMetadataSync,

		readDir as readDirSync,
		createDir as createDirSync,
		remove as removeSync,
		copy as copySync,
		rename as renameSync,
		symlink as symlinkSync,
		link as linkSync,

		readLink as readLinkSync,
		canonical as canonicalSync,
	} from "fs/sync";

	declare export {
		openSync,
		createSync,

		metadataSync,
		linkMetadataSync,

		readDirSync,
		createDirSync,
		removeSync,
		copySync,
		renameSync,
		symlinkSync,
		linkSync,

		readLinkSync,
		canonicalSync,
	};

	declare export var sync: {
		open: typeof openSync,
		create: typeof createSync,

		metadata: typeof metadataSync,
		linkMetadata: typeof linkMetadataSync,

		readDir: typeof readDirSync,
		createDir: typeof createDirSync,
		remove: typeof removeSync,
		copy: typeof copySync,
		rename: typeof renameSync,
		symlink: typeof symlinkSync,
		link: typeof linkSync,

		readLink: typeof readLinkSync,
		canonical: typeof canonicalSync,
	};

	declare export default {
		Metadata: Metadata,
		OpenOptions: OpenOptions,
		SeekMode: SeekMode,
		DirEntry: typeof DirEntry,

		FileHandle: typeof FileHandle,
		open: typeof open,
		create: typeof create,

		metadata: typeof metadata,
		linkMetadata: typeof linkMetadata,

		readDir: typeof readDir,
		createDir: typeof createDir,
		remove: typeof remove,
		copy: typeof copy,
		rename: typeof rename,
		symlink: typeof symlink,
		link: typeof link,

		readLink: typeof readLink,
		canonical: typeof canonical,

		sync: typeof sync,
	};
}

declare module "fs/sync" {
	import {DirEntry, FileHandle, type Metadata, type OpenOptions, type SeekMode} from "fs";

	declare export {
		DirEntry,
		FileHandle,
		Metadata,
		OpenOptions,
		SeekMode,
	}

	declare export function open(path: string, options?: OpenOptions): FileHandle;

	declare export function create(path: string): FileHandle;

	declare export function metadata(path: string): Metadata;

	declare export function linkMetadata(path: string): Metadata;

	declare export function readDir(path: string): Iterable<DirEntry>;

	declare export function createDir(path: string, recursive?: boolean): void;

	declare export function remove(path: string, recursive?: boolean): void;

	declare export function copy(from: string, to: string): number;

	declare export function rename(from: string, to: string): void;

	declare export function symlink(original: string, link: string): void;

	declare export function link(original: string, link: string): void;

	declare export function readLink(path: string): string;

	declare export function canonical(path: string): string;
}
